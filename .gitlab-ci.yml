variables:
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY

stages:
  - dev
  - test
  - prod

cache:
  paths:
    - node_modules/

prod:
  image: node:12-slim
  stage: prod
  script:
    - deploy
  only:
    - prod

test:
  image: node:12-slim
  stage: test
  script:
    - deploy
  only:
    - test

dev:
  image: node:12-slim
  stage: dev
  script:
    - deploy
  only:
    - dev

.auto_devops: &auto_devops |

  #Global Variables
  NVM_INSTALED=false
  declare -a PATHS_TO_DEPLOY

  function print_message {

    echo "==============================================================="
    echo $1
    echo "==============================================================="
  }

  function configure_environment {

    print_message "Environment configuration - Start"

    print_message "Update -- APT-GET"
    apt-get -y update

    print_message "Install -- GIT"
    apt-get -y install git-core
    
    print_message "Install -- Zip"
    apt-get -y install zip

    print_message "Environment configuration - Finished"
  }

  function aws_deploy {
    npm i

    print_message "Make Deploy -- SERVERLESS"
    npm run deploy:$CI_JOB_STAGE
  }

  function get_paths_deploy {

    print_message "Get Paths to deploy - Start"

    HASH_LAST_COMMIT=$(git rev-parse @~) #conseguindo o penultimo hash de commit
    ALL_CHANGED_FILE=$(git diff --name-only ${HASH_LAST_COMMIT} HEAD)

    declare -a arrayToDeploy # declarando o array que vai manter todos os diretorios que necessitam de deploy

    for i in ${ALL_CHANGED_FILE}; do #para cada arquivo
        FILEPATH=$( dirname "$i" ) #consigo o path do diretorio
        while [[ ${FILEPATH} != "." ]]; do #verifico os diretorios anteriores enquanto forem diferentes da raiz
            if [ -f ${FILEPATH}/serverless.yml ]; then # verificando se existe o arquivo de configuracao do serveless nesse diretorio
                arrayToDeploy+=(${FILEPATH}) #adiciona o path a ser realizado o deploy ao array
                break
            fi
            FILEPATH=$( dirname "${FILEPATH}" ) #consigo o path anterior
        done
    done

    arrayToDeploy=($(echo "${arrayToDeploy[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')) #removendo paths duplicados

    PATHS_TO_DEPLOY=${arrayToDeploy[@]}
    print_message "Get Paths to deploy - Finished"
  }

  function execute_deploy {

    get_paths_deploy

    print_message "Prepare Deploy"
    PWD_ORIGIN=$( pwd ) #conseguindo o path original

    for i in ${PATHS_TO_DEPLOY[@]}; do #para cada path realizar o deploy

      cd ${PWD_ORIGIN}/${i}

      print_message "Prepare to AWS deploy"
      LANGUAGE=$( sed -n '/runtime/p' serverless.yml ) #conseguindo a linguagem utilizada
      LANGUAGE=${LANGUAGE/runtime:/}
      STEPFUNCTIONS=$( sed -n '/stateMachines/p' serverless.yml )
      RESOURCES=$( sed -n '/Resources/p' serverless.yml )

      if [[ ${LANGUAGE} == *"nodejs"* ]] || [[ ${STEPFUNCTIONS} == *"stateMachines"* ]] || [[ ${RESOURCES} == *"Resources"* ]]; then
        aws_deploy
        rm -rf node_modules
        rm -rf /home/.doc
      else
        print_message "Favor verificar qual linguagem esta sendo utilizada"
      fi
    done
  }

  function deploy() {
    print_message "Choicing account to deploy"
    if [[ $CI_JOB_STAGE != "prod" ]]; then
      AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_DEV
      AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_DEV
    fi

    configure_environment
    print_message "Deploy - Start"
    execute_deploy
    print_message "Deploy - Finished"
  }

before_script:
  - *auto_devops
